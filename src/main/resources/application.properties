# Initially to bootstrap, unzip the dummy.db.zip file somewhere like on an ssd drive and put the path in below
# primesDbPath=/path/to/ssd/tmp/dummy.db
# The dummy.db is not large so the upper limit is so the upperLimitString is small
# upperLimitString=4294967296
# When you generate a bigger db by generating primes of from a starting parameter of at least 268435456 (0x100000000)
primesDbPath=/home/mcarey/tmp/primes1.db
# This is the largest possible long integer in java
upperLimitString=9223372036854775807
# I used 68719476736 (0x1000000000) as the argument to my prime generator which is about as big as my prime generator
# can do took about an hour to generate the primes and about 48 hours to load the db.

# This is the cache for lengthy prime finding operations, just so if a client finds a lengthy value they can't just
# keep asking for it, and use up all the CPU.
cacheSize=100
# A lengthy operation is anything over 1 second.
cacheableMilliSeconds=1000
# Some lengthy operations are cured as a new prime value is stored in the permanent store others, were the last two
# prime factors are both large will continue to cause slowness such as 1537228672809129301	=	715827883 × 2147483647
# This has been fixed with the introduction of a disk based map of slow two prime composites.
server.ssl.key-store: classpath:springboot.p12
server.ssl.key-store-password: password
server.ssl.key-store-type: pkcs12
server.ssl.key-alias: springboot
server.ssl.key-password: password
server.port: 8443
server.servlet.context-path: /