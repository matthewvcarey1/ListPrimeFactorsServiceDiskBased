plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

group = 'uk.co.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'org.mapdb', name: 'mapdb', version: '3.0.10'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.1.0'
	implementation 'org.springframework.boot:spring-boot-starter:3.1.0'
    implementation 'org.projectlombok:lombok:1.18.26'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"uk/co/example/ListPrimeFactorsService/ListPrimeFactorsServiceApplication.class"
			])
		}))
	}
}

tasks.withType(JavaExec) {
        jvmArgs = ['-Xmx20g']
}

test {
        minHeapSize = "128m" // initial heap size
        maxHeapSize = "20g" // maximum heap size
        jvmArgs = ['-Xmx20g'] // mem argument for the test JVM
}

jar {
    manifest {
        attributes(
                'Main-Class': 'uk/co/example/ListPrimeFactorsService/ListPrimeFactorsServiceApplication.class'
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

